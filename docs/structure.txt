Git repos and structure
Main repo: Locally "Code"
https://github.com/BlakeDonn/TrustyStack

Dockerhub:
https://hub.docker.com/repository/docker/writhkin/rust-backend/general
writhkin/rust-backend:latest

Rust web service deployed at render:
rust-backend:latest
==> Starting service...
Running database migrations...
Database migrations completed successfully.
Starting the application...
Starting the Rust backend server...
DATABASE_URL found: postgresql://writhkin:ssozxICVDXp6uXRqW2aSPbhf9HKdotn9@dpg-crl1a1l6l47c73fpt0m0-a/trustystack_db
Database connection pool created successfully.
Server started successfully at http://0.0.0.0:8080
==> Your service is live ðŸŽ‰
==> No open ports detected, continuing to scan...
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding

Postgresql database deployed at render:
hostname:dpg-crl1a1l6l47c73fpt0m0-a
port:5432
trustystack_db

React web app:
Not created yet, just repo
Plan to use most popular and reliable infra
typescript
Vite
nextjs?
Biome instead of prettier and eslint


Next steps:
1. Extract parts from part list to be added to the database, create relevant tables, and update / adjust api to fetch parts. Please help with ideas in the context of the use cases we come up with. 
2. Build out react web app, set up basic tooling with typescript, yarn, vite, state management (TanStack Query), set up flow and get testing and cicd set up with automatic deployment similar to rust backend.
3. Create configurator on react web app. Build out user flows, make designs, connect FE, BE, PSQL, fetch all parts, populate configurator, build cart feature.

To keep in mind:
1. Be creative with new features for the application, the idea should be that various professional industries can use this tool and see results of hardware on performance for industry software.
2. Lets keep a strong culture of updating documentation and atomatically comitting.
3. If certain features need additional infastructure to do securely and compliant for industry standards, we will do them.
4. Use free tools unless completely impossible


Code/.gitmodules:
[submodule "backend/rust"]
	path = backend/rust
	url = git@github.com:BlakeDonn/trustystack-rust.git
  branch=main
[submodule "frontend/web"]
	path = frontend/web
	url = git@github.com:BlakeDonn/trustystack-react-web.git
  branch=main
[submodule "frontend/native"]
	path = frontend/native
	url = git@github.com:BlakeDonn/trustystack-react-native.git
	branch = main
[submodule "backend/python/parts"]
	path = backend/python/parts
	url = git@github.com:BlakeDonn/trustystack-scraper.git
  branch=main
[submodule "data/database"]
	path = data/database
	url = git@github.com:BlakeDonn/trustystack-database.git
  branch=main
[submodule "infra/cicd"]
	path = infra/cicd
	url = git@github.com:BlakeDonn/trustystack-cicd.git
  branch= main




â”œâ”€â”€ .git
â”‚Â Â  â”œâ”€â”€ FETCH_HEAD
â”‚Â Â  â”œâ”€â”€ HEAD
â”‚Â Â  â”œâ”€â”€ ORIG_HEAD
â”‚Â Â  â”œâ”€â”€ config
â”‚Â Â  â”œâ”€â”€ description
â”‚Â Â  â”œâ”€â”€ index
â”‚Â Â  â”œâ”€â”€ info
â”‚Â Â  â”‚Â Â  â””â”€â”€ exclude
â”‚Â Â  â”œâ”€â”€ logs
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ HEAD
â”‚Â Â  â”‚Â Â  â””â”€â”€ refs
â”‚Â Â  â”œâ”€â”€ modules
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ backend
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ data
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ frontend
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ infra
â”‚Â Â  â”‚Â Â  â””â”€â”€ trustystack-backend
â”‚Â Â  â””â”€â”€ refs
â”‚Â Â      â”œâ”€â”€ heads
â”‚Â Â      â”œâ”€â”€ remotes
â”‚Â Â      â””â”€â”€ tags
â”œâ”€â”€ .github
â”‚Â Â  â””â”€â”€ workflows
â”‚Â Â      â””â”€â”€ tests.yml
â”œâ”€â”€ .gitmodules
â”œâ”€â”€ README.md
â”œâ”€â”€ backend
â”‚Â Â  â”œâ”€â”€ .DS_Store
â”‚Â Â  â”œâ”€â”€ python
â”‚Â Â  â”‚Â Â  â””â”€â”€ parts
â”‚Â Â  â””â”€â”€ rust
â”‚Â Â      â”œâ”€â”€ .DS_Store
â”‚Â Â      â”œâ”€â”€ .env
â”‚Â Â      â”œâ”€â”€ .git
â”‚Â Â      â”œâ”€â”€ .github
â”‚Â Â      â”œâ”€â”€ .gitignore
â”‚Â Â      â”œâ”€â”€ Cargo.toml
â”‚Â Â      â”œâ”€â”€ Dockerfile
â”‚Â Â      â”œâ”€â”€ README.md
â”‚Â Â      â”œâ”€â”€ diesel.toml
â”‚Â Â      â”œâ”€â”€ entrypoint.sh
â”‚Â Â      â”œâ”€â”€ migrations
â”‚Â Â      â”œâ”€â”€ src
â”‚Â Â      â””â”€â”€ tests
â”œâ”€â”€ data
â”‚Â Â  â””â”€â”€ database
â”‚Â Â      â”œâ”€â”€ .git
â”‚Â Â      â”œâ”€â”€ Dockerfile
â”‚Â Â      â””â”€â”€ README.md
â”œâ”€â”€ docs
â”‚Â Â  â”œâ”€â”€ backend.md
â”‚Â Â  â”œâ”€â”€ cicd.md
â”‚Â Â  â”œâ”€â”€ combined.md
â”‚Â Â  â”œâ”€â”€ data.md
â”‚Â Â  â”œâ”€â”€ dev.md
â”‚Â Â  â””â”€â”€ frontend.md
â”œâ”€â”€ frontend
â”‚Â Â  â”œâ”€â”€ .DS_Store
â”‚Â Â  â”œâ”€â”€ native
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ .DS_Store
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ .eslintrc.js
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ .expo
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ .git
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ .gitignore
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ README.md
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ app
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ app.json
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ assets
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ babel.config.js
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ components
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ constants
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ eas.json
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ expo-env.d.ts
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ hooks
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ package.json
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ redux
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ services
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ tsconfig.json
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ types
â”‚Â Â  â”‚Â Â  â””â”€â”€ utils
â”‚Â Â  â””â”€â”€ web
â”‚Â Â      â”œâ”€â”€ .git
â”‚Â Â      â”œâ”€â”€ .gitignore
â”‚Â Â      â”œâ”€â”€ README.md
â”‚Â Â      â”œâ”€â”€ package.json
â”‚Â Â      â”œâ”€â”€ public
â”‚Â Â      â”œâ”€â”€ src
â”‚Â Â      â””â”€â”€ tsconfig.json
â”œâ”€â”€ infra
â”‚Â Â  â”œâ”€â”€ .DS_Store
â”‚Â Â  â””â”€â”€ cicd
â”‚Â Â      â”œâ”€â”€ .DS_Store
â”‚Â Â      â”œâ”€â”€ .git
â”‚Â Â      â”œâ”€â”€ .github
â”‚Â Â      â””â”€â”€ pipelines
â””â”€â”€ structure.txt

49 directories, 65 files
.github/workflows
â””â”€â”€ tests.yml

1 directory, 1 file

